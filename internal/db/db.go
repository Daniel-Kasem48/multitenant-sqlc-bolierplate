package db

import (
	"context"
	"fmt"
	models "github.com/Daniel-Kasem48/multitenant-sqlc-bolierplate/internal/db/autogenerated"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/labstack/echo/v4"
	"net/http"
)

type TenantDB struct {
	models.DBTX
	schema string
}

func (tdb *TenantDB) setSearchPath(ctx context.Context) error {
	_, err := tdb.DBTX.Exec(ctx, fmt.Sprintf("SET search_path TO %s", tdb.schema))
	return err
}

func (tdb *TenantDB) Exec(ctx context.Context, query string, args ...interface{}) (pgconn.CommandTag, error) {
	if err := tdb.setSearchPath(ctx); err != nil {
		return pgconn.CommandTag{}, err
	}
	return tdb.DBTX.Exec(ctx, query, args...)
}

func (tdb *TenantDB) Query(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	if err := tdb.setSearchPath(ctx); err != nil {
		return nil, err
	}
	return tdb.DBTX.Query(ctx, query, args...)
}

func (tdb *TenantDB) QueryRow(ctx context.Context, query string, args ...interface{}) pgx.Row {
	if err := tdb.setSearchPath(ctx); err != nil {
		// Since QueryRow doesn't return an error, we need to handle it differently
		// One option is to return a row that will return this error when scanned
		return &errorRow{err: err}
	}
	return tdb.DBTX.QueryRow(ctx, query, args...)
}

// errorRow is a helper type to return errors from QueryRow
type errorRow struct {
	err error
}

func (er *errorRow) Scan(...interface{}) error {
	return er.err
}

type MultiTenantQuerier struct {
	tenantDB *TenantDB
	Querier  *models.Queries
}

func NewMultiTenantQuerier(db models.DBTX, schema string) *MultiTenantQuerier {
	tenantDB := &TenantDB{DBTX: db, schema: schema}
	return &MultiTenantQuerier{
		tenantDB: tenantDB,
		Querier:  models.New(tenantDB),
	}
}

func NewMultiTenantQuerierByContext(ctx echo.Context, db models.DBTX) (*MultiTenantQuerier, error) {
	// Retrieve tenantSchema from context
	tenantSchema := ctx.Request().Context().Value("tenantSlug")

	// Check if tenantSchema is nil
	if tenantSchema == nil {
		fmt.Println("tenantSchema is not set in context")
		return nil, echo.NewHTTPError(http.StatusInternalServerError, "Tenant schema not found")
	}

	mtq := NewMultiTenantQuerier(db, tenantSchema.(string))
	return mtq, nil
}

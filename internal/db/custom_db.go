package db

import (
	"context"
	"fmt"
	"github.com/Daniel-Kasem48/multitenant-sqlc-bolierplate/internal/config"
	models "github.com/Daniel-Kasem48/multitenant-sqlc-bolierplate/internal/db/autogenerated"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"go.uber.org/fx"
	"log"
	"time"
)

func NewPgxPool(cfg *config.Config) (*pgxpool.Pool, error) {
	connString := fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%s sslmode=disable",
		cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBHost, cfg.DBPort)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	pool, err := pgxpool.New(ctx, connString)
	if err != nil {
		return nil, err
	}

	// Ping the database to ensure the connection is established
	err = pool.Ping(ctx)
	if err != nil {
		return nil, err
	}

	return pool, nil
}

// NewPgxConn initializes the pgx connection and manages its lifecycle
func NewPgxConn(cfg *config.Config, lc fx.Lifecycle) (*pgx.Conn, error) {
	connString := fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%s sslmode=disable",
		cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBHost, cfg.DBPort)

	conn, err := pgx.Connect(context.Background(), connString)
	if err != nil {
		return nil, err
	}

	// Manage connection lifecycle (open on start, close on stop)
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			log.Println("Starting PostgreSQL connection")
			return nil
		},
		OnStop: func(ctx context.Context) error {
			log.Println("Closing PostgreSQL connection")
			return conn.Close(ctx)
		},
	})

	return conn, nil
}

func BindDBTX(pool *pgxpool.Pool) models.DBTX {
	return pool
}

var DBModule = fx.Module(
	"dbmodule",
	fx.Provide(NewPgxPool),
	fx.Provide(NewPgxConn),
	fx.Provide(BindDBTX),       // Bind *pgxpool.Pool to models.DBTX,
	fx.Provide(ProvideQueries), // Provides *db.Queries
)

// ProvideQueries creates a new instance of *db.Queries using pgxpool.Pool
func ProvideQueries(pool *pgxpool.Pool) *models.Queries {
	return models.New(pool) // Assuming 'models' is where sqlc generated the Queries struct
}
